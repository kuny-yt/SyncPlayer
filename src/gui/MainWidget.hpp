#ifndef MAINWIDGET_HPP
#define MAINWIDGET_HPP

#include <QMainWindow>
#include <QSystemTrayIcon>
#if QT_VERSION >= 0x050000 && defined Q_OS_WIN
	#include <QAbstractNativeEventFilter>
	#define QT5_WINDOWS
#endif

#include <PlayClass.hpp>
#ifdef UPDATER
	#include <Updater.hpp>
#endif

#ifdef EXTSYNC
#include "sync_core.h"
#endif

class QFrame;
class QLabel;
class Slider;
class MenuBar;
class InfoDock;
class VideoDock;
class QToolButton;
class AboutWidget;
class PlaylistDock;
class SettingsWidget;
class QMPlay2Extensions;

class MainWidget : public QMainWindow
#ifdef QT5_WINDOWS
	, private QAbstractNativeEventFilter
#endif
{
	friend class QMPlay2GUIClass;
	Q_OBJECT
public:
	MainWidget(QPair< QStringList, QStringList > &);
	~MainWidget();
private slots:
	void focusChanged(QWidget *, QWidget *);

	void processParam(const QString &, const QString &);

	void audioChannelsChanged();

	void updateWindowTitle(const QString &t = QString());
	void videoStarted();

	void togglePlay();
	void seek(int);
	void chStream(const QString &);
	void playStateChanged(bool);

	void volUpDown();
	void actionSeek();
	void switchARatio();
	void resetARatio();
	void resetFlip();
	void resetRotate90();

	void visualizationFullScreen();
	void hideAllExtensions();
	void toggleVisibility();
	void createMenuBar();
	void trayIconClicked(QSystemTrayIcon::ActivationReason);
	void toggleCompactView();
	void toggleFullScreen();
	void showMessage(const QString &, const QString &, int, int);
	void statusBarMessage(const QString &);

	void openUrl();
    void openFiles();
#ifdef EXTSYNC
    void on_filelist(const QStringList &lis);
    void on_select(const QString &fl);
#endif
	void openDir();
	void loadPlist();
	void savePlist();
	void saveGroup();
	void showSettings(const QString &);
	void showSettings();

	void itemDropped(const QString &, bool);
	void browseSubsFile();

    void updatePos(double);
	void mousePositionOnSlider(int);

	void volume(int);

	void newConnection();
	void readSocket();

	void about();

#if !defined Q_OS_MAC && !defined Q_OS_ANDROID
	void hideMenu(bool);
#else
	void hideMenu(bool) {} //To avoid incorrect CPP file generated by MOC on Android
#endif
	void lockWidgets(bool);

	void hideDocksSlot();
#ifdef QT5_WINDOWS
	void delayedRestore();
#endif

	void uncheckSuspend();
private:
	void savePlistHelper(const QString &, const QString &, bool);

	QMenu *createPopupMenu();

	void showToolBar(bool);
	void hideDocks();

	void mouseMoveEvent(QMouseEvent *);
	void leaveEvent(QEvent *);
	void closeEvent(QCloseEvent *);
	void changeEvent(QEvent *);
	void moveEvent(QMoveEvent *);
	void showEvent(QShowEvent *);
	void hideEvent(QHideEvent *);

#ifdef Q_OS_WIN
#if QT_VERSION < 0x050000
	bool winEvent(MSG *m, long *);
#else
	bool nativeEventFilter(const QByteArray &, void *m, long *);
#endif
#endif

	MenuBar *menuBar;
	QToolBar *mainTB;
	QStatusBar *statusBar;

	QFrame *vLine;
	QLabel *timeL, *stateL;

	VideoDock *videoDock;
	InfoDock *infoDock;
	PlaylistDock *playlistDock;

	Slider *seekS, *volS;

	PlayClass playC;

	QSystemTrayIcon *tray;
	QByteArray dockWidgetState, fullScreenDockWidgetState;
	QRect savedGeo;
	QList< QMPlay2Extensions * > visibleQMPlay2Extensions;
	SettingsWidget *settingsW;
	AboutWidget *aboutW;
	bool isCompactView, wasShow, fullScreen;

#if !defined Q_OS_MAC && !defined Q_OS_ANDROID
	QAction *hideMenuAct;
#endif
	QAction *lockWidgetsAct;

#ifdef UPDATER
	Updater updater;
#endif
#ifdef EXTSYNC
    sync_core sync;
    void sync_enable();
#endif
};

#endif //MAINWIDGET_HPP
